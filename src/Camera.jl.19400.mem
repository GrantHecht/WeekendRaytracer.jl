        - 
        - struct Camera{T <: AbstractArray, U <: AbstractFloat}
        -     # Origin of camera
        -     origin              ::T
        - 
        -     # Location of lower left corner of viewport (in pixle coordinates)
        -     lower_left_corner   ::T
        - 
        -     # Horizontal and vertial dimensions of viewport (in pixles)
        -     horizontal          ::T
        -     vertical            ::T
        - 
        -     # Camera frame basis vectors
        -     u                   ::T
        -     v                   ::T
        -     w                   ::T
        - 
        -     # Camera lense radius
        -     lens_radius        ::U
        - end
        - 
        - # Constructor
        - function Camera(lookfrom, lookat, vup, vfov, aspect_ratio, aperture, focus_dist)
        0     theta           = deg2rad(vfov)
        0     h               = tan(0.5 * theta)
        0     viewport_height = 2.0 * h
        0     viewport_width  = aspect_ratio * viewport_height
        - 
        0     wvec            = lookfrom - lookat
        0     uvec            = cross(vup, wvec)
        0     vvec            = cross(wvec, uvec)
        0     invNwvec        = 1.0 / norm(wvec)
        0     invNuvec        = 1.0 / norm(uvec)
        0     invNvvec        = 1.0 / norm(vvec)
        0     w               = SVector(invNwvec*wvec[1], invNwvec*wvec[2], invNwvec*wvec[3])
        0     u               = SVector(invNuvec*uvec[1], invNuvec*uvec[2], invNuvec*uvec[3])
        0     v               = SVector(invNvvec*vvec[1], invNvvec*vvec[2], invNvvec*vvec[3])
        - 
        -     origin          = lookfrom
        0     horizontal      = focus_dist * viewport_width * u
        0     vertical        = focus_dist * viewport_height * v
        0     lower_left_corner = origin - 0.5 * horizontal - 0.5 * vertical - focus_dist * w
        0     lens_radius     = 0.5 * aperture
        0     return Camera(origin, lower_left_corner, horizontal, vertical, u, v, w, lens_radius)
        - end
        - 
        - # Function to get ray
        - function get_ray(cam::Camera, s::T, t::T)  where {T <: AbstractFloat}
        -     unit    = random_in_unit_disk(T)
        -     rd      = SVector(cam.lens_radius*unit[1], cam.lens_radius*unit[2])
        -     offset  = SVector(cam.u[1]*rd[1] + cam.v[1]*rd[2],
        -                       cam.u[2]*rd[1] + cam.v[2]*rd[2],
        -                       0.0)
        -     origin  = SVector(cam.origin[1] + offset[1],
        -                       cam.origin[2] + offset[2],
        -                       cam.origin[3] + offset[3])
        -     return Ray(origin, cam.lower_left_corner + s*cam.horizontal + t*cam.vertical - cam.origin - offset)
        - end
