        - 
        - # Define Dielectric struct
        - struct Dielectric{T} <: AbstractMaterial
        0     ir::T
        - end
        - 
        - # Define scatter
        - function scatter(ray_in::Ray, rec::HitRecord{T,U,M}) where {T,U,M <: Dielectric}
        -     # Set attenuation
        -     attenuation = RGB(1.0,1.0,1.0)
        - 
        -     # Set refrection ration
        0     refraction_ratio = rec.front_face ? (1.0 / rec.mat.ir) : rec.mat.ir
        - 
        -     # Compute ray unit direction
        0     invNdir  = 1.0 / norm(ray_in.dir)
        0     unit_dir = SVector(invNdir*ray_in.dir[1],
        -                        invNdir*ray_in.dir[2],
        -                        invNdir*ray_in.dir[3])
        - 
        -     # Compute if we can refract
        0     cos_theta       = min(dot(-unit_dir, rec.normal), 1.0)
        0     sin_theta       = sqrt(1.0 - cos_theta*cos_theta)
        0     cannot_refract  = refraction_ratio * sin_theta > 1.0
        - 
        -     # Compute ray direction
        0     flag      = (cannot_refract || reflectance(cos_theta, refraction_ratio) > rand())
        0     direction = flag ? reflect(unit_dir, rec.normal) : 
        -                        refract(unit_dir, rec.normal, refraction_ratio)
        - 
        -     # Compute scattered ray
        0     scattered = Ray(SVector(rec.p...), direction)
        -     flag      = true
        0     return flag, scattered, attenuation
        - end
